require 'net/http'
require 'rubygems'
require 'json'
require 'rollbar/deploy'
require 'byebug'

namespace :rollbar do

  # TODO: adjust code for capistrano 2

  desc 'Send deployment started notification to Rollbar.'
  task :deploy_started do
    on primary fetch(:rollbar_role) do
      warn("You need to upgrade capistrano to '>= 3.1' version in order to correctly report deploys to Rollbar. (On 3.0, the reported revision will be incorrect.)") if Capistrano::VERSION =~ /^3\.0/

      info "Notifying Rollbar of deployment start"

      result = ::Rollbar::Deploy.report(
        access_token: fetch(:rollbar_token),
        environment: fetch(:rollbar_env),
        revision: fetch(:rollbar_revision),
        rollbar_username: fetch(:rollbar_user),
        local_username: fetch(:rollbar_user),
        comment: fetch(:rollbar_comment),
        status: :started,
        proxy: :ENV,
        dry_run: dry_run?
      )
      
      info result[:request_info]
      
      if dry_run?
        
        set :rollbar_deploy_id, 123
        info "Skipping sending HTTP requests to Rollbar in dry run."
        
      else
        
        info result[:response_info] if result[:response_info]
        
        if result[:deploy_id]
          set :rollbar_deploy_id, result[:deploy_id]
        else
          error "Unable to report deploy to Rollbar"
        end
        
      end
    end
  end
  
  task :deploy_succeeded do
    on primary fetch(:rollbar_role) do
      warn("You need to upgrade capistrano to '>= 3.1' version in order to correctly report deploys to Rollbar. (On 3.0, the reported revision will be incorrect.)") if Capistrano::VERSION =~ /^3\.0/
      
      info "Setting deployment status to `succeeded` in Rollbar"  
      
      deploy_id = fetch(:rollbar_deploy_id)
      
      if deploy_id      
        result = ::Rollbar::Deploy.update(
          access_token: fetch(:rollbar_token),
          deploy_id: deploy_id,
          status: :succeeded,
          proxy: :ENV,
          dry_run: dry_run?
        )
        
        info result[:request_info]
        
        info result[:response_info] if result[:response_info]
        
        if dry_run?
          
          info "Skipping sending HTTP requests to Rollbar in dry run."
          
        else
          
          if result[:response].is_a? Net::HTTPSuccess
            info "Set deployment status to `succeeded` in Rollbar"  
          else
            error "Unable to update deploy status in Rollbar"
          end
          
        end
      else
        error "Failed to update the deploy in Rollbar. No deploy id available."
      end
    end
  end
  
  task :deploy_failed do
    on primary fetch(:rollbar_role) do
      warn("You need to upgrade capistrano to '>= 3.1' version in order to correctly report deploys to Rollbar. (On 3.0, the reported revision will be incorrect.)") if Capistrano::VERSION =~ /^3\.0/
      
      info "Setting deployment status to `failed` in Rollbar"  
      
      deploy_id = fetch(:rollbar_deploy_id)
      
      if deploy_id      
        result = ::Rollbar::Deploy.update(
          access_token: fetch(:rollbar_token),
          deploy_id: deploy_id,
          status: :failed,
          proxy: :ENV,
          dry_run: dry_run?
        )
        
        info result[:request_info]
        
        info result[:response_info] if result[:response_info]
        
        if dry_run?
          
          info "Skipping sending HTTP requests to Rollbar in dry run."
          
        else
          
          if result[:response].is_a? Net::HTTPSuccess
            info "Set deployment status to `failed` in Rollbar"  
          else
            error "Unable to update deploy status in Rollbar"
          end
          
        end
      else
        error "Failed to update the deploy in Rollbar. No deploy id available."
      end
    end
  end
  
  task :fail do
    raise StandardError.new
  end
  
end

namespace :deploy do
  after 'deploy:set_current_revision', 'rollbar:deploy_started'
  after 'deploy:finished', 'rollbar:deploy_succeeded'
  after 'deploy:failed', 'rollbar:deploy_failed'
end

namespace :load do
  task :defaults do
    set :rollbar_user,      Proc.new { fetch :local_user, ENV['USER'] || ENV['USERNAME'] }
    set :rollbar_env,       Proc.new { fetch :rails_env, 'production' }
    set :rollbar_token,     Proc.new { abort "Please specify the Rollbar access token, set :rollbar_token, 'your token'" }
    set :rollbar_role,      Proc.new { :app }
    set :rollbar_revision,  Proc.new { fetch :current_revision }
  end
end
